<?php

/**
 * Implementation of hook_openlayers_behaviors().
 *
 * This is a ctools plugins hook.
 */
function dolpp_openlayers_behaviors() {
  return array(
    'dolpp_behavior_query' => array(
      'title' => t('OL++ Query'),
      'description' => t('Adds info boxes on maps clicks.'),
      'type' => 'layer',
      'path' => drupal_get_path('module', 'dolpp') .'/behaviors',
      'file' => 'dolpp_behavior_query.inc',
      'behavior' => array(
        'class' => 'dolpp_behavior_query',
        'parent' => 'openlayers_behavior',
      ),
    ),
    'dolpp_behavior_legend' => array(
      'title' => t('OL++ Legend'),
      'description' => t('Adds map legend.'),
      'type' => 'layer',
      'path' => drupal_get_path('module', 'dolpp') .'/behaviors',
      'file' => 'dolpp_behavior_legend.inc',
      'behavior' => array(
        'class' => 'dolpp_behavior_legend',
        'parent' => 'openlayers_behavior',
      ),
    ),
    'dolpp_behavior_select_feature' => array(
      'title' => t('OL++ Feature select'),
      'description' => t('Adds feature selection.'),
      'type' => 'layer',
      'path' => drupal_get_path('module', 'dolpp') .'/behaviors',
      'file' => 'dolpp_behavior_select_feature.inc',
      'behavior' => array(
        'class' => 'dolpp_behavior_select_feature',
        'parent' => 'openlayers_behavior',
      ),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * This is a ctools plugins hook.
 */
function dolpp_form_openlayers_ui_layers_form_alter(&$form, &$form_state) {

	$layer_type = $form['layer']['data']['layer_type']['#value'];

	// We'll only act upon WMS layers for now
	if ( $layer_type != "openlayers_layer_type_wms" ) return;

	$olddata = $form['#parameters'][2]->data;

	$form['layer']['data']['params']['queryable'] = array (
            '#type' => 'checkbox',
            '#title' => t('Queryable'),
            '#description' => t('Check if this layer supports GetFeatureInfo calls.'),
            '#default_value' => isset($olddata['params']['queryable']) ? $olddata['params']['queryable'] : FALSE,
        );

	$form['layer']['data']['params']['hasLegend'] = array (
            '#type' => 'checkbox',
            '#title' => t('Has legend'),
            '#description' => t('Check if this layer supports a legend.'),
            '#default_value' => isset($olddata['params']['hasLegend']) ? $olddata['params']['hasLegend'] : FALSE,
        );

}

/**
 * Implementation of hook_block().
 */
function dolpp_block($op, $delta = 0) {
  switch ($op) {
    case 'list':
      $blocks = array('dolpplegend' => array('info' => t('OL++ Legend')));
      return $blocks;
    case 'view':
      switch ($delta) {
        case 'dolpplegend':
          return array(
            'subject' => t('Layer legend'),
            'content' => theme('dolpp_legend')
          );
      }
  }
}

/**
 * Implementation of hook_theme().
 */
function dolpp_theme() {
    return array(
        'dolpp_legend' => array(
        'arguments' => array(),
        ),
    );
}

/*
 * Implementation of theme function for legend block
 */
function theme_dolpp_legend() {
    return '<div id="dolpp-legend"></div>';
}

/**
 * Implementation of hook_ctools_plugin_directory
 */
function dolpp_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openlayers' && $plugin == 'style_plugin') {
    return 'plugins/style_plugin';
  }
}


/**
 * Implementation of hook_ctools_plugin_api().
 */
function dolpp_ctools_plugin_api($module, $api) {
  // Define plugins for OpenLayers plugins api
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_styles':
        return array('version' => 1);

    }
  }
}

